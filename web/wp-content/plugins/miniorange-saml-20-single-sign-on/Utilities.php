<?php


include_once "\x78\155\154\x73\145\143\154\151\142\163\56\x70\x68\160";
use RobRichards\XMLSecLibs\XMLSecurityKey;
use RobRichards\XMLSecLibs\XMLSecurityDSig;
use RobRichards\XMLSecLibs\XMLSecEnc;
class SAMLSPUtilities
{
    public static function generateID()
    {
        return "\x5f" . self::stringToHex(self::generateRandomBytes(21));
    }
    public static function stringToHex($XL)
    {
        $eX = '';
        $LH = 0;
        um:
        if (!($LH < strlen($XL))) {
            goto an;
        }
        $eX .= sprintf("\45\x30\62\x78", ord($XL[$LH]));
        sT:
        $LH++;
        goto um;
        an:
        return $eX;
    }
    public static function generateRandomBytes($bK, $VQ = TRUE)
    {
        return openssl_random_pseudo_bytes($bK);
    }
    public static function createAuthnRequest($pH, $o3, $un, $Vb = "\x66\141\x6c\163\x65", $ut = "\110\x74\x74\160\x52\145\x64\151\162\145\x63\164", $Ss = '')
    {
        $Ss = "\165\x72\x6e\72\157\141\163\151\x73\x3a\x6e\141\155\x65\x73\x3a\164\143\72\123\101\115\114\x3a" . $Ss;
        $eU = "\x3c\77\x78\x6d\x6c\40\x76\145\x72\163\151\x6f\156\75\x22\61\x2e\60\42\x20\x65\x6e\143\x6f\144\x69\156\147\75\x22\x55\x54\x46\55\70\x22\77\76" . "\74\x73\x61\x6d\x6c\x70\72\101\165\164\x68\156\122\145\161\x75\145\x73\x74\x20\170\x6d\x6c\x6e\x73\x3a\163\x61\155\x6c\160\75\42\x75\162\156\x3a\x6f\x61\x73\151\x73\x3a\156\x61\x6d\x65\x73\x3a\x74\143\x3a\123\x41\x4d\x4c\x3a\62\56\x30\72\x70\x72\x6f\x74\x6f\143\x6f\x6c\x22\x20\170\155\154\156\x73\x3d\x22\165\162\156\x3a\157\x61\163\151\163\72\x6e\x61\155\x65\163\x3a\x74\143\72\123\x41\x4d\x4c\x3a\x32\56\x30\72\141\x73\x73\x65\x72\x74\151\157\x6e\x22\40\111\104\75\x22" . self::generateID() . "\42\40\x56\145\x72\x73\x69\157\x6e\x3d\42\62\56\60\42\x20\x49\163\x73\165\x65\x49\x6e\163\x74\x61\x6e\164\75\x22" . self::generateTimestamp() . "\42";
        if (!($Vb == "\x74\162\x75\145")) {
            goto a7;
        }
        $eU .= "\40\106\157\x72\143\x65\x41\165\x74\x68\156\x3d\42\x74\162\x75\145\42";
        a7:
        $eU .= "\x20\120\162\157\x74\x6f\143\157\154\102\x69\156\x64\151\x6e\x67\75\42\165\162\156\x3a\157\141\x73\x69\x73\72\x6e\x61\x6d\x65\x73\x3a\x74\x63\x3a\x53\101\x4d\114\x3a\62\56\x30\x3a\142\151\156\x64\x69\x6e\147\x73\72\x48\x54\x54\120\x2d\120\x4f\x53\124\42\x20\101\163\x73\x65\x72\164\x69\x6f\156\x43\x6f\156\163\165\155\x65\x72\123\x65\162\166\x69\x63\145\x55\122\x4c\75\42" . $pH . "\x22\40\104\x65\163\164\151\x6e\141\x74\151\x6f\x6e\75\x22" . $un . "\x22\x3e\74\163\141\x6d\154\x3a\111\163\163\165\x65\x72\40\170\155\154\x6e\163\x3a\163\141\x6d\154\75\x22\165\162\x6e\x3a\157\141\x73\151\163\72\156\x61\x6d\145\163\72\164\x63\x3a\x53\101\115\114\x3a\62\x2e\x30\x3a\141\163\x73\145\x72\x74\x69\x6f\156\42\x3e" . $o3 . "\74\57\163\141\155\x6c\x3a\111\163\163\x75\145\x72\76\x3c\x73\x61\x6d\154\160\x3a\x4e\141\155\x65\x49\x44\120\157\x6c\151\x63\171\40\x41\154\x6c\157\x77\103\x72\x65\x61\x74\x65\x3d\42\x74\x72\x75\x65\42\x20\x46\157\162\x6d\141\164\75\x22" . $Ss . "\x22\15\xa\x20\x20\40\x20\x20\x20\x20\40\40\40\40\40\x20\40\x20\x20\x20\x20\40\x20\x20\40\40\x20\57\x3e\x3c\57\x73\x61\155\x6c\160\x3a\101\x75\x74\150\x6e\x52\x65\x71\165\145\x73\x74\76";
        if (empty($ut) || $ut == "\110\x74\164\x70\x52\145\144\x69\162\145\143\x74") {
            goto Yp;
        }
        $OF = gzdeflate($eU);
        $US = base64_encode($OF);
        goto tR;
        Yp:
        $OF = gzdeflate($eU);
        $US = base64_encode($OF);
        $d9 = urlencode($US);
        $eU = $d9;
        tR:
        update_option("\115\117\137\123\x41\115\114\137\x52\x45\121\125\x45\x53\x54", $US);
        return $eU;
    }
    public static function generateTimestamp($J5 = NULL)
    {
        if (!($J5 === NULL)) {
            goto EF;
        }
        $J5 = time();
        EF:
        return gmdate("\131\55\155\x2d\x64\x5c\124\110\x3a\x69\x3a\163\134\132", $J5);
    }
    public static function xpQuery(DOMNode $Dg, $jz)
    {
        static $or = NULL;
        if ($Dg instanceof DOMDocument) {
            goto th;
        }
        $wP = $Dg->ownerDocument;
        goto oT;
        th:
        $wP = $Dg;
        oT:
        if (!($or === NULL || !$or->document->isSameNode($wP))) {
            goto cy;
        }
        $or = new DOMXPath($wP);
        $or->registerNamespace("\163\x6f\141\160\55\145\x6e\x76", "\150\x74\x74\x70\x3a\x2f\57\x73\143\150\145\x6d\141\163\56\x78\155\x6c\163\x6f\141\160\x2e\157\x72\x67\57\163\157\x61\160\x2f\x65\156\x76\x65\154\157\160\x65\57");
        $or->registerNamespace("\163\141\x6d\x6c\137\160\x72\x6f\x74\157\x63\x6f\x6c", "\x75\162\156\72\157\x61\x73\151\163\x3a\156\x61\x6d\145\x73\x3a\164\143\72\x53\x41\x4d\x4c\72\x32\x2e\60\x3a\x70\162\x6f\x74\x6f\x63\157\154");
        $or->registerNamespace("\163\141\x6d\x6c\137\x61\163\x73\145\x72\x74\x69\157\156", "\165\x72\156\72\x6f\141\163\x69\x73\x3a\156\x61\155\x65\163\72\164\143\x3a\123\101\x4d\x4c\x3a\62\56\x30\x3a\x61\163\x73\145\162\164\x69\x6f\x6e");
        $or->registerNamespace("\x73\x61\155\x6c\x5f\155\x65\164\x61\x64\x61\x74\141", "\165\162\x6e\72\x6f\141\163\151\x73\x3a\x6e\x61\x6d\x65\x73\72\x74\143\72\x53\101\x4d\x4c\x3a\62\x2e\x30\72\x6d\145\x74\x61\144\x61\164\141");
        $or->registerNamespace("\144\x73", "\150\164\164\160\x3a\x2f\57\x77\x77\167\56\167\63\56\x6f\162\147\57\62\60\60\x30\x2f\60\x39\x2f\x78\155\154\144\x73\151\x67\x23");
        $or->registerNamespace("\170\145\156\x63", "\x68\164\x74\160\72\57\x2f\x77\x77\167\56\x77\63\x2e\157\x72\147\57\62\x30\60\x31\57\x30\64\x2f\170\155\154\x65\156\143\43");
        cy:
        $d1 = $or->query($jz, $Dg);
        $eX = array();
        $LH = 0;
        dt:
        if (!($LH < $d1->length)) {
            goto MR;
        }
        $eX[$LH] = $d1->item($LH);
        bZ:
        $LH++;
        goto dt;
        MR:
        return $eX;
    }
    public static function parseNameId(DOMElement $Cr)
    {
        $eX = array("\126\x61\154\165\x65" => trim($Cr->textContent));
        foreach (array("\116\141\155\x65\x51\165\x61\x6c\151\146\x69\145\162", "\123\120\x4e\x61\155\x65\x51\x75\x61\154\x69\x66\151\145\x72", "\x46\x6f\x72\155\141\x74") as $NQ) {
            if (!$Cr->hasAttribute($NQ)) {
                goto An;
            }
            $eX[$NQ] = $Cr->getAttribute($NQ);
            An:
            sO:
        }
        Hi:
        return $eX;
    }
    public static function xsDateTimeToTimestamp($K8)
    {
        $kr = array();
        $pV = "\x2f\x5e\x28\x5c\x64\134\x64\134\144\134\x64\x29\x2d\x28\x5c\144\x5c\144\x29\55\x28\134\x64\x5c\x64\51\x54\50\x5c\x64\x5c\x64\51\72\x28\x5c\x64\x5c\144\x29\x3a\50\134\144\134\144\x29\50\77\72\x5c\x2e\x5c\x64\53\51\77\x5a\x24\57\104";
        if (!(preg_match($pV, $K8, $kr) == 0)) {
            goto GH;
        }
        echo sprintf("\x6e\166\x61\x6c\151\144\x20\123\x41\115\114\62\x20\164\x69\155\145\x73\x74\141\155\160\40\160\x61\x73\x73\145\144\x20\x74\157\x20\x78\x73\104\x61\164\145\124\x69\x6d\x65\124\157\124\x69\155\145\x73\x74\141\x6d\160\x3a\40" . $K8);
        die;
        GH:
        $hf = intval($kr[1]);
        $M1 = intval($kr[2]);
        $oG = intval($kr[3]);
        $QJ = intval($kr[4]);
        $lE = intval($kr[5]);
        $Jb = intval($kr[6]);
        $c3 = gmmktime($QJ, $lE, $Jb, $M1, $oG, $hf);
        return $c3;
    }
    public static function extractStrings(DOMElement $n5, $oL, $sS)
    {
        $eX = array();
        $Dg = $n5->firstChild;
        Mf:
        if (!($Dg !== NULL)) {
            goto lr;
        }
        if (!($Dg->namespaceURI !== $oL || $Dg->localName !== $sS)) {
            goto Cq;
        }
        goto yP;
        Cq:
        $eX[] = trim($Dg->textContent);
        yP:
        $Dg = $Dg->nextSibling;
        goto Mf;
        lr:
        return $eX;
    }
    public static function validateElement(DOMElement $pZ)
    {
        $i6 = new XMLSecurityDSig();
        $i6->idKeys[] = "\x49\104";
        $Ny = self::xpQuery($pZ, "\56\57\x64\163\x3a\x53\151\x67\x6e\141\x74\x75\162\145");
        if (count($Ny) === 0) {
            goto O_;
        }
        if (count($Ny) > 1) {
            goto jO;
        }
        goto Bl;
        O_:
        return FALSE;
        goto Bl;
        jO:
        echo sprintf("\130\x4d\114\x53\x65\143\x3a\40\155\x6f\x72\145\x20\x74\x68\141\156\40\x6f\156\145\40\x73\151\147\156\141\x74\x75\x72\x65\40\x65\154\x65\x6d\145\156\164\40\x69\156\x20\162\157\157\x74\x2e");
        die;
        Bl:
        $Ny = $Ny[0];
        $i6->sigNode = $Ny;
        $i6->canonicalizeSignedInfo();
        if ($i6->validateReference()) {
            goto F9;
        }
        echo sprintf("\x58\115\114\x73\x65\x63\72\x20\144\x69\147\145\x73\164\40\166\141\x6c\151\144\141\x74\x69\157\x6e\x20\146\x61\x69\154\x65\144");
        die;
        F9:
        $Ls = FALSE;
        foreach ($i6->getValidatedNodes() as $TP) {
            if ($TP->isSameNode($pZ)) {
                goto FO;
            }
            if ($pZ->parentNode instanceof DOMDocument && $TP->isSameNode($pZ->ownerDocument)) {
                goto cL;
            }
            goto Qc;
            FO:
            $Ls = TRUE;
            goto Ni;
            goto Qc;
            cL:
            $Ls = TRUE;
            goto Ni;
            Qc:
            Vw:
        }
        Ni:
        if ($Ls) {
            goto ck;
        }
        echo sprintf("\x58\115\114\123\145\x63\x3a\x20\x54\x68\145\40\162\157\157\x74\40\x65\154\x65\x6d\145\x6e\x74\40\151\x73\x20\156\157\164\40\x73\151\147\156\145\144\x2e");
        die;
        ck:
        $BH = array();
        foreach (self::xpQuery($Ny, "\x2e\57\x64\163\72\113\x65\x79\x49\x6e\146\157\x2f\144\x73\x3a\130\65\x30\x39\x44\x61\164\141\57\x64\x73\x3a\x58\65\60\71\103\x65\x72\x74\151\x66\151\x63\141\x74\x65") as $Dh) {
            $ia = trim($Dh->textContent);
            $ia = str_replace(array("\xd", "\xa", "\11", "\x20"), '', $ia);
            $BH[] = $ia;
            Ss:
        }
        C4:
        $eX = array("\x53\x69\x67\156\141\x74\x75\162\x65" => $i6, "\103\145\x72\x74\x69\x66\x69\143\x61\164\145\163" => $BH);
        return $eX;
    }
    public static function validateSignature(array $vb, XMLSecurityKey $uZ)
    {
        $i6 = $vb["\123\151\x67\x6e\141\164\165\x72\x65"];
        $GD = self::xpQuery($i6->sigNode, "\x2e\57\x64\163\x3a\x53\x69\147\x6e\145\x64\x49\156\146\157\x2f\144\163\72\x53\x69\x67\156\141\164\x75\162\145\x4d\145\164\x68\x6f\x64");
        if (!empty($GD)) {
            goto pC;
        }
        echo sprintf("\115\x69\163\x73\x69\x6e\147\40\123\x69\x67\x6e\141\x74\x75\x72\x65\115\x65\x74\150\157\x64\40\x65\x6c\145\x6d\x65\156\164");
        die;
        pC:
        $GD = $GD[0];
        if ($GD->hasAttribute("\101\154\147\x6f\x72\151\164\150\155")) {
            goto sK;
        }
        echo sprintf("\x4d\x69\x73\163\151\156\x67\40\101\x6c\x67\x6f\162\151\x74\150\x6d\x2d\141\x74\x74\162\x69\142\165\164\x65\40\157\x6e\40\123\x69\x67\156\141\x74\x75\x72\x65\115\x65\164\x68\x6f\144\40\x65\x6c\145\x6d\x65\156\x74\56");
        die;
        sK:
        $YE = $GD->getAttribute("\101\154\147\x6f\x72\x69\164\150\155");
        if (!($uZ->type === XMLSecurityKey::RSA_SHA1 && $YE !== $uZ->type)) {
            goto sN;
        }
        $uZ = self::castKey($uZ, $YE);
        sN:
        if ($i6->verify($uZ)) {
            goto UO;
        }
        echo sprintf("\x55\x6e\x61\142\154\145\40\x74\157\x20\166\141\x6c\151\144\x61\164\145\40\x53\x69\147\x6e\141\x74\165\x72\145");
        die;
        UO:
    }
    public static function castKey(XMLSecurityKey $uZ, $YK, $u8 = "\160\165\142\154\151\143")
    {
        if (!($uZ->type === $YK)) {
            goto uS;
        }
        return $uZ;
        uS:
        $zm = openssl_pkey_get_details($uZ->key);
        if (!($zm === FALSE)) {
            goto UJ;
        }
        echo sprintf("\125\x6e\141\x62\x6c\145\x20\164\157\x20\x67\x65\164\x20\153\145\171\x20\x64\x65\164\x61\151\154\x73\x20\x66\162\157\155\40\x58\115\114\x53\x65\143\x75\x72\151\164\x79\113\x65\x79\56");
        die;
        UJ:
        if (isset($zm["\x6b\x65\171"])) {
            goto Qf;
        }
        echo sprintf("\115\151\163\163\x69\x6e\147\x20\153\145\x79\40\151\156\40\x70\165\142\x6c\x69\143\x20\x6b\145\x79\x20\x64\x65\164\141\x69\x6c\163\56");
        die;
        Qf:
        $y1 = new XMLSecurityKey($YK, array("\x74\171\x70\x65" => $u8));
        $y1->loadKey($zm["\x6b\145\x79"]);
        return $y1;
    }
    public static function processResponse($oR, $R3, $z6, SAML2SPResponse $HG, $Ns, $KH)
    {
        $FL = current($HG->getAssertions());
        $eh = $FL->getNotBefore();
        if (!($eh !== NULL && $eh > time() + 60)) {
            goto C5;
        }
        wp_die("\122\145\x63\x65\151\166\145\144\40\141\156\x20\x61\x73\x73\145\x72\x74\x69\157\156\x20\164\x68\x61\x74\x20\x69\163\40\x76\141\154\151\x64\x20\x69\156\x20\x74\x68\x65\x20\x66\x75\x74\165\162\x65\x2e\x20\x43\150\x65\143\x6b\x20\x63\154\157\x63\x6b\40\163\171\x6e\x63\150\162\x6f\156\151\172\141\164\151\x6f\x6e\x20\157\156\40\x49\144\120\40\x61\156\144\40\x53\120\56");
        C5:
        $qA = $FL->getNotOnOrAfter();
        if (!($qA !== NULL && $qA <= time() - 60)) {
            goto ZN;
        }
        wp_die("\122\x65\143\x65\x69\166\x65\x64\x20\x61\x6e\40\x61\163\x73\145\162\x74\151\157\x6e\x20\164\x68\x61\164\40\x68\141\x73\x20\x65\170\160\151\162\x65\x64\x2e\x20\103\150\x65\x63\x6b\40\143\x6c\157\143\153\40\163\x79\x6e\143\x68\162\x6f\x6e\x69\x7a\141\164\x69\x6f\x6e\x20\157\156\x20\111\144\x50\x20\141\x6e\144\x20\123\120\x2e");
        ZN:
        $um = $FL->getSessionNotOnOrAfter();
        if (!($um !== NULL && $um <= time() - 60)) {
            goto Hs;
        }
        wp_die("\122\x65\x63\145\x69\166\x65\144\x20\141\x6e\40\x61\x73\163\x65\x72\x74\x69\157\156\x20\167\151\x74\x68\x20\141\40\x73\145\163\163\x69\157\156\40\x74\150\x61\x74\40\150\141\163\x20\x65\170\x70\x69\162\x65\x64\x2e\x20\103\x68\145\143\x6b\40\143\x6c\x6f\x63\153\x20\x73\171\x6e\x63\150\x72\x6f\156\x69\x7a\141\x74\x69\157\x6e\40\x6f\x6e\40\111\x64\x50\40\x61\156\x64\x20\x53\120\x2e");
        Hs:
        $hR = $HG->getDestination();
        if (!(substr($hR, -1) == "\x2f")) {
            goto hq;
        }
        $hR = substr($hR, 0, -1);
        hq:
        if (!(substr($oR, -1) == "\57")) {
            goto re;
        }
        $oR = substr($oR, 0, -1);
        re:
        if (!($hR !== NULL && $hR !== $oR)) {
            goto HX;
        }
        echo "\104\x65\163\x74\151\x6e\141\x74\x69\157\156\x20\151\x6e\x20\162\145\163\x70\x6f\x6e\163\145\40\144\x6f\145\x73\x6e\x27\164\x20\155\x61\164\x63\x68\40\x74\x68\145\40\x63\165\x72\162\145\x6e\164\40\x55\x52\114\x2e\40\x44\145\163\x74\151\156\x61\x74\x69\157\x6e\40\x69\x73\40\x22" . htmlspecialchars($hR) . "\42\54\40\x63\x75\162\x72\x65\156\x74\40\x55\x52\x4c\x20\x69\163\40\42" . htmlspecialchars($oR) . "\x22\56";
        die;
        HX:
        $Mr = self::checkSign($R3, $z6, $Ns, $KH);
        return $Mr;
    }
    public static function checkSign($R3, $z6, $Ns, $KH)
    {
        $BH = $z6["\x43\145\x72\164\151\146\x69\143\x61\x74\145\x73"];
        if (count($BH) === 0) {
            goto j8;
        }
        $NG = array();
        $NG[] = $R3;
        $tT = self::findCertificate($NG, $BH, $KH);
        if (!($tT == false)) {
            goto HL;
        }
        return false;
        HL:
        goto OF;
        j8:
        $tI = maybe_unserialize(get_option("\x73\141\x6d\x6c\137\x78\65\x30\x39\x5f\143\145\162\x74\151\x66\x69\x63\x61\x74\145"));
        $tT = $tI[$Ns];
        OF:
        $Qt = NULL;
        $uZ = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array("\164\171\160\145" => "\160\x75\x62\154\x69\x63"));
        $uZ->loadKey($tT);
        try {
            self::validateSignature($z6, $uZ);
            return TRUE;
        } catch (Exception $LR) {
            $Qt = $LR;
        }
        if ($Qt !== NULL) {
            goto Kl;
        }
        return FALSE;
        goto Tr;
        Kl:
        throw $Qt;
        Tr:
    }
    public static function validateIssuerAndAudience($FO, $aO, $og, $KH)
    {
        $o3 = current($FO->getAssertions())->getIssuer();
        $FL = current($FO->getAssertions());
        $lh = $FL->getValidAudiences();
        if (strcmp($og, $o3) === 0) {
            goto JS;
        }
        if ($KH == "\x74\x65\x73\164\126\x61\154\x69\144\141\164\x65" or $KH == "\x74\x65\x73\164\116\x65\167\x43\145\162\164\x69\146\x69\x63\141\164\145") {
            goto ME;
        }
        wp_die("\x57\145\x20\143\x6f\x75\x6c\144\x20\156\157\x74\x20\x73\x69\147\x6e\x20\171\157\x75\x20\151\x6e\56\40\120\x6c\x65\141\163\x65\40\x63\x6f\x6e\x74\x61\x63\164\40\x79\x6f\x75\x72\x20\101\x64\x6d\x69\156\151\x73\x74\x72\x61\164\157\162", "\x45\x72\x72\x6f\x72\40\72\x49\163\x73\x75\x65\x72\40\143\141\x6e\x6e\157\x74\x20\142\x65\x20\x76\145\162\x69\146\151\x65\x64");
        goto xi;
        ME:
        $fe = mo_options_error_constants::Error_issuer_not_verfied;
        $Ki = mo_options_error_constants::Cause_issuer_not_verfied;
        echo "\74\x64\x69\166\40\163\164\171\154\145\x3d\x22\x66\x6f\x6e\x74\55\x66\x61\155\151\x6c\171\72\x43\141\x6c\151\142\162\151\x3b\x70\141\x64\x64\x69\x6e\x67\72\x30\x20\63\x25\x3b\42\x3e";
        echo "\x3c\144\x69\166\40\x73\x74\171\x6c\x65\75\42\143\157\x6c\x6f\x72\72\x20\43\141\71\64\x34\x34\x32\x3b\142\141\143\153\147\162\x6f\165\156\144\x2d\x63\x6f\x6c\x6f\162\72\x20\x23\x66\62\x64\x65\x64\145\73\x70\x61\x64\x64\151\x6e\147\72\x20\x31\65\x70\170\73\155\141\162\x67\151\x6e\x2d\x62\157\164\x74\x6f\x6d\72\x20\x32\60\160\x78\x3b\164\x65\x78\164\55\141\154\151\x67\x6e\72\x63\x65\156\x74\x65\162\x3b\142\157\x72\144\145\x72\x3a\61\160\x78\x20\163\157\x6c\x69\144\40\43\105\x36\102\x33\x42\62\x3b\146\157\x6e\164\55\x73\151\172\145\x3a\61\70\160\164\73\42\76\40\105\x52\122\117\x52\x3c\57\x64\151\166\76\15\12\x20\x20\40\40\40\x20\40\x20\x20\40\40\x20\x20\40\x20\x20\x3c\x64\151\x76\40\x73\x74\x79\x6c\145\75\x22\x63\x6f\154\x6f\x72\72\x20\x23\x61\x39\64\64\x34\62\x3b\x66\157\x6e\164\x2d\x73\151\172\x65\x3a\61\x34\160\x74\x3b\x20\155\x61\x72\x67\151\156\55\142\x6f\x74\x74\x6f\x6d\72\62\60\x70\x78\x3b\164\145\x78\x74\55\x61\154\x69\147\x6e\x3a\40\152\x75\163\x74\x69\x66\x79\x22\76\x3c\x70\x3e\74\x73\x74\x72\157\156\147\76\105\x72\x72\x6f\162\72" . $fe . "\40\74\x2f\163\164\162\157\156\x67\76\74\57\160\x3e\15\12\x20\x20\x20\x20\x20\40\x20\x20\40\x20\x20\x20\40\40\40\40\15\12\x20\x20\40\x20\x20\40\x20\40\x20\x20\40\40\x20\x20\40\x20\x3c\x70\76\x3c\x73\164\162\x6f\x6e\x67\76\120\x6f\x73\x73\x69\142\154\x65\40\103\x61\x75\x73\145\72" . $Ki . "\40\x3c\x2f\x73\164\162\157\x6e\147\x3e\74\57\160\76\xd\xa\40\x20\40\x20\x20\40\40\x20\40\x20\40\40\x20\40\x20\x20\74\x70\76\74\163\x74\162\x6f\x6e\x67\76\x45\156\x74\x69\x74\x79\x20\x49\x44\x20\x69\156\x20\x53\101\115\114\x20\x52\145\163\x70\x6f\x6e\163\x65\72\x20\x3c\x2f\x73\x74\162\157\x6e\147\x3e" . $o3 . "\x3c\160\76\xd\xa\x20\40\x20\40\x20\40\x20\40\40\40\40\x20\40\x20\40\40\x3c\160\76\x3c\x73\x74\x72\x6f\156\x67\76\x45\156\x74\151\164\171\x20\111\104\x20\103\157\156\x66\x69\x67\x75\x72\x65\144\x20\x69\x6e\40\164\x68\145\40\x70\x6c\x75\x67\x69\156\x3a\40\x3c\x2f\163\164\x72\x6f\x6e\147\x3e" . $og . "\74\57\160\x3e\15\12\x9\x9\x9\x9\x3c\x70\x3e\x3c\163\x74\162\x6f\x6e\147\x3e\x53\x6f\x6c\x75\164\151\x6f\x6e\72\74\x2f\x73\x74\x72\x6f\x6e\x67\x3e\74\57\x70\76\xd\xa\11\11\11\11\74\157\154\x3e\15\xa\x9\x9\x9\x9\11\x3c\x6c\151\76\103\x6f\x70\x79\40\164\150\145\40\105\156\x74\x69\164\x79\40\111\104\40\157\146\x20\x53\x41\115\x4c\x20\122\x65\163\160\157\156\x73\145\x20\146\x72\x6f\155\x20\x61\x62\157\166\x65\40\141\x6e\x64\x20\x70\x61\x73\164\x65\x20\x69\x74\40\151\x6e\40\x45\156\x74\x69\164\171\40\111\104\x20\157\162\x20\x49\163\x73\165\x65\162\40\146\151\x65\154\144\40\x75\156\x64\x65\x72\x20\123\145\x72\x76\x69\x63\x65\x20\x50\x72\x6f\x76\x69\144\x65\162\40\x53\145\164\x75\x70\40\164\x61\142\56\x3c\x2f\x6c\x69\76\15\xa\x9\11\x9\11\x3c\57\157\x6c\76\xd\xa\x9\x9\11\11\74\x2f\x64\151\x76\76\15\xa\x20\x20\40\x20\40\x20\x20\x20\40\40\x20\40\x20\x20\40\x20\x3c\x2f\x64\x69\x76\x3e";
        mo_saml_download_logs($fe, $Ki);
        die;
        xi:
        goto kg;
        JS:
        if (empty($lh)) {
            goto yH;
        }
        if (in_array($aO, $lh, TRUE)) {
            goto qH;
        }
        if ($KH == "\164\145\x73\164\x56\x61\154\151\x64\141\x74\x65" or $KH == "\x74\x65\163\x74\116\145\167\x43\145\x72\x74\151\146\x69\x63\141\x74\x65") {
            goto KP;
        }
        wp_die("\x57\x65\x20\143\x6f\x75\x6c\144\x20\156\x6f\x74\x20\x73\151\x67\156\x20\x79\157\165\40\x69\156\56\40\x50\x6c\x65\x61\x73\x65\40\x63\157\x6e\164\141\143\x74\x20\171\157\x75\x72\x20\101\x64\x6d\x69\156\151\x73\x74\162\141\x74\x6f\162", "\x45\162\162\157\x72\40\72\111\156\x76\x61\154\x69\x64\40\101\165\144\x69\x65\x6e\143\x65\40\x55\x52\x49");
        goto P6;
        KP:
        $fe = mo_options_error_constants::Error_invalid_audience;
        $Ki = mo_options_error_constants::Cause_invalid_audience;
        echo "\x3c\x64\151\x76\x20\163\x74\x79\154\145\x3d\42\x66\x6f\156\x74\x2d\x66\x61\155\151\154\171\x3a\x43\x61\x6c\151\142\162\151\x3b\x70\141\144\144\x69\x6e\147\x3a\x30\x20\63\45\x3b\x22\x3e";
        echo "\x3c\144\151\166\x20\x73\x74\171\x6c\x65\75\42\x63\x6f\154\x6f\162\x3a\x20\43\x61\71\x34\x34\64\x32\x3b\142\x61\x63\153\147\x72\157\165\x6e\x64\55\x63\x6f\154\157\x72\72\40\43\146\x32\x64\145\x64\x65\73\160\141\144\144\x69\156\147\x3a\40\x31\x35\x70\x78\x3b\155\141\x72\147\151\x6e\x2d\142\x6f\x74\x74\x6f\x6d\x3a\40\62\60\x70\170\x3b\x74\x65\170\x74\55\141\x6c\x69\147\156\72\x63\x65\x6e\x74\145\162\73\142\x6f\162\144\x65\162\x3a\61\160\x78\40\x73\x6f\154\x69\144\x20\43\105\66\x42\63\x42\x32\73\146\x6f\156\x74\x2d\163\151\172\145\72\61\x38\x70\164\73\x22\76\40\105\122\122\117\122\x3c\x2f\x64\x69\x76\x3e\15\xa\x20\40\x20\x20\x20\x20\40\x20\x20\x20\40\40\x20\x20\x20\x20\40\40\x20\x20\x3c\x64\151\x76\x20\x73\164\x79\154\145\x3d\42\143\157\154\x6f\x72\72\x20\43\x61\x39\x34\x34\64\x32\73\146\157\156\x74\x2d\x73\x69\172\x65\72\x31\64\160\164\x3b\40\155\141\162\147\151\156\x2d\x62\157\x74\x74\157\155\x3a\x32\x30\x70\170\x3b\x22\76\x3c\x70\76\x3c\163\164\x72\157\156\x67\76\105\162\x72\157\x72\x3a\40\x3c\x2f\x73\164\x72\x6f\156\x67\76" . $fe . "\x3c\x2f\160\x3e\xd\12\40\40\40\x20\40\40\x20\x20\40\40\40\40\40\40\x20\x20\40\x20\40\40\xd\xa\40\x20\40\40\40\x20\x20\40\x20\40\x20\x20\x20\x20\40\x20\40\40\40\x20\x3c\160\x3e\x3c\163\164\162\x6f\x6e\147\76\x50\157\x73\x73\151\x62\x6c\145\x20\x43\x61\165\163\145\x3a\x20\x3c\57\x73\x74\162\157\x6e\147\x3e" . $Ki . "\x3c\57\x70\x3e\15\12\x20\40\40\40\x20\x20\40\x20\x20\40\40\x20\x20\x20\40\40\40\x20\40\x20\x3c\x70\76\x45\170\x70\x65\143\x74\x65\x64\x20\157\156\145\40\157\x66\40\x74\x68\145\40\101\x75\x64\x69\145\x6e\143\x65\x73\x20\x74\157\x20\142\x65\72\x20" . $aO . "\x3c\160\76\15\12\x9\x9\11\11\x9\x3c\x70\x3e\x3c\163\164\162\157\156\147\x3e\123\157\154\165\164\151\157\x6e\72\x3c\57\163\x74\x72\x6f\156\147\76\74\x2f\x70\x3e\xd\xa\x9\x9\x9\x9\11\x3c\157\x6c\x3e\15\12\x9\11\x9\x9\x9\x9\74\154\x69\x3e\x43\x6f\160\171\x20\164\x68\145\40\105\x78\160\x65\143\164\145\x64\40\101\165\144\151\x65\x6e\x63\x65\40\125\x52\x49\x20\146\162\x6f\155\40\141\142\x6f\x76\x65\x20\141\x6e\x64\x20\160\x61\x73\x74\x65\40\151\x74\x20\x69\x6e\40\x74\150\145\x20\101\165\x64\151\x65\156\143\x65\x20\125\x52\111\40\x66\x69\x65\x6c\x64\x20\141\164\40\x49\144\x65\156\x74\x69\164\x79\x20\120\x72\x6f\x76\x69\144\145\162\x20\163\151\x64\x65\x2e\x3c\57\x6c\x69\76\15\12\x9\x9\11\11\11\x3c\x2f\x6f\154\76\15\xa\11\11\x9\x9\x9\x3c\x2f\144\151\x76\76";
        mo_saml_download_logs($fe, $Ki);
        die;
        P6:
        goto ef;
        qH:
        return TRUE;
        ef:
        yH:
        kg:
    }
    private static function findCertificate(array $xI, array $BH, $KH)
    {
        $Dn = array();
        foreach ($BH as $eV) {
            $Zr = strtolower(sha1(base64_decode($eV)));
            if (in_array($Zr, $xI, TRUE)) {
                goto KS;
            }
            $Dn[] = $Zr;
            return false;
            KS:
            $c4 = "\55\x2d\55\x2d\x2d\102\105\107\111\116\40\x43\105\x52\124\x49\106\111\103\x41\124\105\x2d\55\x2d\x2d\x2d\xa" . chunk_split($eV, 64) . "\x2d\x2d\x2d\55\x2d\105\116\x44\x20\103\105\122\x54\x49\x46\111\103\101\124\105\x2d\x2d\x2d\55\x2d\12";
            return $c4;
            On:
        }
        qR:
        if ($KH == "\164\x65\x73\164\126\x61\154\x69\144\141\164\x65" or $KH == "\x74\145\x73\x74\x4e\145\x77\103\x65\162\164\x69\146\151\x63\141\x74\x65") {
            goto y5;
        }
        wp_die("\127\x65\x20\x63\157\165\x6c\x64\x20\x6e\157\164\40\163\151\147\x6e\x20\x79\x6f\165\40\x69\156\56\40\120\154\x65\x61\x73\145\x20\x63\157\156\x74\141\143\x74\40\171\157\165\162\x20\101\144\155\x69\x6e\151\163\x74\x72\x61\164\157\162", "\x45\162\x72\157\162\x20\72\x43\145\162\x74\x69\x66\x69\x63\x61\164\x65\x20\x6e\x6f\164\x20\146\157\x75\156\144");
        goto B1;
        y5:
        $c4 = "\55\55\x2d\x2d\55\102\x45\107\111\x4e\x20\103\x45\x52\124\111\106\111\103\101\124\105\55\55\x2d\x2d\55\74\142\162\x3e" . chunk_split($eV, 64) . "\x3c\x62\162\x3e\x2d\55\x2d\x2d\x2d\105\x4e\104\x20\103\x45\122\124\x49\x46\111\x43\101\124\x45\55\x2d\x2d\55\x2d";
        echo "\74\144\151\x76\40\163\164\x79\154\x65\x3d\x22\x66\157\x6e\164\55\146\141\155\x69\x6c\171\x3a\x43\141\x6c\151\x62\162\x69\x3b\x70\141\x64\144\151\x6e\x67\72\x30\x20\x33\45\x3b\42\76";
        echo "\74\144\x69\x76\40\163\164\171\x6c\x65\x3d\x22\x63\157\x6c\x6f\162\x3a\x20\43\141\71\x34\x34\64\x32\73\142\x61\143\x6b\x67\x72\157\x75\156\x64\55\x63\157\x6c\x6f\x72\x3a\x20\x23\146\x32\144\x65\x64\145\73\x70\x61\144\x64\x69\x6e\147\x3a\40\x31\x35\x70\170\73\155\x61\162\147\151\156\55\142\157\x74\164\157\x6d\72\40\62\60\x70\x78\73\x74\145\170\164\55\141\x6c\151\x67\x6e\72\143\x65\156\164\145\x72\x3b\142\157\162\x64\145\x72\72\x31\x70\x78\40\163\x6f\x6c\x69\144\40\43\x45\66\102\x33\x42\x32\x3b\x66\157\156\164\55\x73\x69\172\145\72\61\70\x70\164\x3b\x22\76\40\x45\x52\x52\x4f\x52\74\57\144\x69\166\x3e\xd\xa\x9\11\11\74\144\x69\x76\x20\x73\x74\x79\154\145\75\x22\x63\x6f\x6c\157\162\x3a\40\43\x61\71\x34\x34\x34\62\73\x66\157\x6e\164\55\x73\x69\x7a\145\x3a\x31\64\160\x74\73\40\x6d\x61\162\147\151\156\55\x62\157\164\x74\x6f\155\x3a\x32\60\x70\170\x3b\42\x3e\74\160\x3e\x3c\163\164\x72\157\156\x67\x3e\x45\x72\x72\157\162\x3a\x20\x3c\x2f\x73\x74\162\x6f\156\147\x3e\125\156\x61\x62\154\x65\x20\x74\157\40\146\x69\156\144\x20\141\x20\143\x65\162\x74\151\x66\151\143\141\x74\x65\x20\x6d\x61\x74\143\x68\x69\x6e\147\40\164\x68\145\x20\x63\157\x6e\x66\x69\147\x75\162\145\x64\40\x66\x69\156\x67\x65\x72\x70\x72\151\156\x74\x2e\x3c\x2f\x70\x3e\15\12\x9\11\11\74\x70\76\x50\154\145\141\x73\145\x20\143\157\156\164\141\143\x74\x20\x79\x6f\165\x72\x20\141\x64\x6d\151\156\151\163\x74\162\x61\x74\157\162\x20\141\x6e\144\40\162\145\x70\157\x72\x74\x20\x74\150\x65\40\x66\x6f\154\154\157\167\151\156\x67\40\145\x72\x72\157\x72\72\x3c\57\160\76\xd\xa\x9\11\x9\74\x70\x3e\x3c\x73\x74\x72\x6f\156\147\76\120\x6f\x73\x73\151\x62\154\x65\x20\103\x61\165\x73\x65\x3a\40\x3c\x2f\x73\164\162\157\x6e\147\76\x27\x58\x2e\65\x30\71\40\x43\145\x72\164\x69\146\151\x63\141\164\145\47\x20\146\x69\x65\154\144\40\151\x6e\x20\x70\x6c\165\x67\x69\156\x20\144\157\145\163\40\156\157\164\40\155\141\x74\143\150\40\164\150\x65\40\x63\x65\162\x74\151\146\x69\x63\x61\164\145\40\146\x6f\x75\156\x64\40\x69\156\x20\123\x41\x4d\114\x20\122\145\x73\x70\x6f\x6e\163\x65\x2e\x3c\57\x70\x3e\xd\12\x9\x9\11\74\x70\76\74\163\x74\162\157\x6e\147\x3e\x43\x65\162\x74\151\x66\x69\143\141\164\x65\40\x66\157\165\156\x64\40\x69\x6e\x20\x53\x41\x4d\114\x20\122\x65\163\160\x6f\156\163\145\72\x20\x3c\x2f\163\x74\x72\157\156\x67\x3e\74\142\162\x3e\x3c\x62\162\x3e" . $c4 . "\x3c\57\x70\76\xd\12\11\x9\11\11\11\74\x2f\x64\151\166\x3e\15\xa\x9\x9\x9\x9\x9\74\x64\x69\x76\40\x73\164\171\154\145\75\x22\x6d\141\162\x67\151\156\72\63\x25\x3b\x64\x69\163\x70\x6c\141\x79\72\x62\x6c\x6f\143\153\x3b\164\145\170\164\55\141\x6c\151\x67\156\x3a\143\x65\156\x74\145\x72\x3b\42\76\15\12\15\12\x9\x9\x9\11\x9\74\144\151\166\x20\163\x74\171\x6c\x65\75\x22\x6d\141\162\x67\x69\156\x3a\x33\45\x3b\x64\x69\163\160\154\141\171\x3a\142\x6c\x6f\143\153\73\x74\145\170\164\x2d\141\154\x69\147\x6e\72\143\x65\x6e\x74\x65\x72\73\42\76\74\x69\x6e\x70\165\x74\40\163\164\171\154\x65\75\42\160\x61\144\144\x69\156\147\72\61\x25\73\167\x69\144\164\150\x3a\61\60\x30\160\170\73\142\x61\143\153\x67\162\157\x75\x6e\x64\72\x20\43\x30\x30\x39\x31\x43\104\40\156\157\x6e\x65\x20\x72\145\x70\x65\x61\x74\x20\x73\x63\162\157\x6c\x6c\40\x30\45\x20\60\x25\x3b\143\165\162\163\157\x72\x3a\x20\160\157\151\156\164\145\x72\x3b\146\157\156\x74\x2d\163\151\x7a\x65\x3a\61\65\160\170\73\x62\x6f\162\144\x65\162\55\167\151\x64\x74\x68\x3a\40\x31\160\170\73\x62\157\x72\x64\x65\162\x2d\163\164\171\x6c\x65\x3a\x20\x73\157\154\x69\144\x3b\x62\157\162\144\145\162\55\x72\141\x64\151\x75\x73\72\x20\63\x70\x78\x3b\167\x68\151\x74\x65\55\163\x70\141\x63\145\x3a\40\x6e\x6f\167\162\x61\160\x3b\x62\x6f\x78\55\x73\151\x7a\x69\156\147\72\40\142\157\x72\144\145\x72\x2d\142\x6f\170\73\x62\x6f\162\144\145\162\x2d\x63\157\x6c\157\x72\x3a\40\x23\60\x30\x37\63\x41\101\73\x62\157\170\x2d\x73\x68\x61\x64\157\167\72\40\x30\160\x78\40\61\160\170\x20\60\x70\x78\x20\162\x67\142\141\50\61\x32\60\54\x20\x32\60\x30\x2c\40\62\63\x30\54\40\60\56\x36\51\x20\x69\156\163\145\x74\x3b\x63\157\x6c\157\x72\72\x20\x23\x46\106\x46\73\x22\x74\x79\x70\x65\x3d\42\142\165\x74\164\157\156\42\40\x76\x61\x6c\x75\x65\75\x22\x44\157\156\x65\x22\40\x6f\156\103\154\x69\143\x6b\x3d\x22\163\x65\154\146\56\143\x6c\x6f\163\x65\50\51\73\42\x3e\x3c\x2f\144\x69\166\76";
        die;
        B1:
    }
    private static function doDecryptElement(DOMElement $Wt, XMLSecurityKey $oA, array &$aK)
    {
        $GV = new XMLSecEnc();
        $GV->setNode($Wt);
        $GV->type = $Wt->getAttribute("\x54\x79\160\145");
        $dV = $GV->locateKey($Wt);
        if ($dV) {
            goto fO;
        }
        echo sprintf("\x43\157\165\x6c\x64\x20\156\x6f\x74\40\x6c\x6f\x63\x61\x74\145\x20\153\x65\x79\40\141\x6c\147\x6f\162\x69\164\x68\155\x20\151\156\40\x65\x6e\143\162\x79\160\164\x65\x64\40\x64\141\x74\x61\x2e");
        die;
        fO:
        $u7 = $GV->locateKeyInfo($dV);
        if ($u7) {
            goto xm;
        }
        echo sprintf("\x43\157\x75\x6c\144\x20\x6e\x6f\x74\40\154\157\x63\141\164\145\40\74\144\163\151\147\x3a\113\x65\171\111\x6e\146\157\x3e\40\146\x6f\162\40\164\x68\145\40\x65\x6e\x63\x72\171\160\x74\x65\144\40\153\145\x79\x2e");
        die;
        xm:
        $Y7 = $oA->getAlgorith();
        if ($u7->isEncrypted) {
            goto un;
        }
        $Jr = $dV->getAlgorith();
        if (!($Y7 !== $Jr)) {
            goto r7;
        }
        echo sprintf("\x41\x6c\147\157\162\x69\164\150\x6d\40\155\x69\163\155\141\164\143\150\x20\x62\x65\164\167\145\145\x6e\40\151\x6e\x70\x75\x74\x20\x6b\145\x79\40\141\x6e\144\x20\x6b\x65\x79\x20\x69\x6e\x20\x6d\x65\163\x73\x61\x67\x65\x2e\x20" . "\x4b\145\171\x20\167\141\x73\72\40" . var_export($Y7, TRUE) . "\x3b\x20\x6d\x65\x73\163\141\147\145\40\167\x61\163\72\40" . var_export($Jr, TRUE));
        die;
        r7:
        $dV = $oA;
        goto PD;
        un:
        $I9 = $u7->getAlgorith();
        if (!in_array($I9, $aK, TRUE)) {
            goto UQ;
        }
        echo sprintf("\x41\x6c\147\157\162\151\164\150\155\40\x64\151\x73\141\142\x6c\x65\144\x3a\40" . var_export($I9, TRUE));
        die;
        UQ:
        if (!($I9 === XMLSecurityKey::RSA_OAEP_MGF1P && $Y7 === XMLSecurityKey::RSA_1_5)) {
            goto sx;
        }
        $Y7 = XMLSecurityKey::RSA_OAEP_MGF1P;
        sx:
        if (!($Y7 !== $I9)) {
            goto nq;
        }
        echo sprintf("\101\154\147\x6f\x72\151\x74\150\155\x20\155\x69\x73\155\x61\x74\143\150\40\x62\145\164\x77\145\145\156\40\151\156\x70\x75\164\x20\153\145\x79\x20\x61\156\144\x20\153\x65\171\x20\x75\x73\x65\x64\x20\164\x6f\x20\x65\x6e\x63\x72\171\x70\x74\40" . "\x20\164\150\x65\x20\163\x79\155\155\x65\164\162\151\143\40\x6b\145\x79\40\x66\157\x72\x20\x74\x68\x65\40\x6d\x65\163\x73\x61\147\x65\56\40\x4b\x65\171\40\167\x61\163\72\40" . var_export($Y7, TRUE) . "\x3b\40\x6d\x65\163\x73\x61\x67\x65\x20\167\x61\x73\72\40" . var_export($I9, TRUE));
        die;
        nq:
        $xA = $u7->encryptedCtx;
        $u7->key = $oA->key;
        $Nq = $dV->getSymmetricKeySize();
        if (!($Nq === NULL)) {
            goto iI;
        }
        echo sprintf("\125\x6e\x6b\156\157\167\x6e\40\153\145\x79\x20\163\151\172\x65\x20\146\157\162\40\x65\x6e\x63\x72\171\160\164\151\157\156\40\x61\154\x67\157\162\x69\164\x68\x6d\x3a\x20" . var_export($dV->type, TRUE));
        die;
        iI:
        try {
            $uZ = $xA->decryptKey($u7);
            if (!(strlen($uZ) != $Nq)) {
                goto r3;
            }
            echo sprintf("\125\156\145\x78\x70\x65\143\x74\x65\x64\40\153\x65\171\40\x73\x69\x7a\x65\x20\50" . strlen($uZ) * 8 . "\142\x69\x74\x73\51\40\x66\x6f\x72\x20\x65\x6e\143\x72\171\x70\x74\x69\x6f\156\x20\x61\154\x67\157\x72\x69\x74\x68\155\72\x20" . var_export($dV->type, TRUE));
            die;
            r3:
        } catch (Exception $LR) {
            $r1 = $xA->getCipherValue();
            $WR = openssl_pkey_get_details($u7->key);
            $WR = sha1(serialize($WR), TRUE);
            $uZ = sha1($r1 . $WR, TRUE);
            if (strlen($uZ) > $Nq) {
                goto wG;
            }
            if (strlen($uZ) < $Nq) {
                goto dq;
            }
            goto Gr;
            wG:
            $uZ = substr($uZ, 0, $Nq);
            goto Gr;
            dq:
            $uZ = str_pad($uZ, $Nq);
            Gr:
        }
        $dV->loadkey($uZ);
        PD:
        $YK = $dV->getAlgorith();
        if (!in_array($YK, $aK, TRUE)) {
            goto b_;
        }
        echo sprintf("\101\x6c\147\x6f\x72\x69\164\x68\x6d\40\144\151\x73\x61\142\x6c\x65\144\x3a\x20" . var_export($YK, TRUE));
        die;
        b_:
        $nr = $GV->decryptNode($dV, FALSE);
        $Cr = "\74\162\x6f\157\164\x20\170\155\154\x6e\x73\x3a\x73\141\155\154\75\42\165\162\x6e\72\x6f\x61\x73\x69\163\72\156\141\x6d\x65\x73\x3a\x74\143\72\123\x41\x4d\114\72\62\x2e\60\x3a\x61\x73\163\145\x72\164\151\x6f\156\x22\40" . "\x78\155\154\x6e\163\72\x78\x73\151\75\42\150\164\x74\x70\72\x2f\x2f\x77\x77\167\56\x77\x33\x2e\157\162\x67\57\x32\60\60\x31\x2f\130\x4d\114\123\143\150\145\155\141\x2d\x69\x6e\x73\x74\141\x6e\x63\x65\x22\76" . $nr . "\x3c\57\x72\157\157\x74\76";
        $bJ = new DOMDocument();
        if (@$bJ->loadXML($Cr)) {
            goto gY;
        }
        throw new Exception("\x46\141\x69\x6c\145\x64\40\x74\x6f\40\x70\x61\x72\163\x65\x20\144\145\x63\x72\171\x70\x74\145\144\40\x58\115\114\x2e\x20\115\x61\x79\142\x65\x20\x74\x68\145\40\167\x72\x6f\x6e\147\40\x73\150\x61\x72\x65\144\153\x65\x79\40\167\x61\163\x20\165\x73\x65\144\x3f");
        gY:
        $tG = $bJ->firstChild->firstChild;
        if (!($tG === NULL)) {
            goto MU;
        }
        echo sprintf("\x4d\151\163\x73\x69\x6e\x67\x20\145\156\x63\x72\x79\160\164\x65\x64\x20\x65\154\x65\155\x65\156\x74\x2e");
        throw new Exception("\x4d\151\x73\163\151\156\x67\x20\x65\156\x63\162\171\160\164\145\144\x20\145\154\x65\x6d\x65\x6e\x74\x2e");
        MU:
        if ($tG instanceof DOMElement) {
            goto In;
        }
        echo sprintf("\104\145\143\x72\x79\160\x74\x65\144\x20\145\154\x65\155\145\156\x74\40\167\x61\x73\x20\156\157\x74\x20\141\143\164\165\141\x6c\x6c\x79\40\x61\40\104\117\x4d\105\x6c\x65\x6d\x65\x6e\x74\56");
        In:
        return $tG;
    }
    public static function decryptElement(DOMElement $Wt, XMLSecurityKey $oA, array $aK = array(), XMLSecurityKey $UO = NULL)
    {
        try {
            return self::doDecryptElement($Wt, $oA, $aK);
        } catch (Exception $LR) {
            try {
            } catch (Exception $G2) {
            }
            echo "\x3c\144\151\x76\x20\163\x74\171\154\x65\x3d\x22\146\x6f\156\164\x2d\x66\141\155\151\154\x79\x3a\103\141\154\151\142\162\151\73\x70\141\x64\x64\151\156\x67\72\60\x20\63\45\73\42\x3e";
            echo "\x3c\144\151\x76\x20\163\164\171\154\145\x3d\42\143\157\x6c\x6f\162\72\40\x23\141\71\x34\x34\x34\x32\73\x62\x61\143\153\x67\x72\x6f\x75\156\x64\55\x63\x6f\154\x6f\162\x3a\40\x23\146\62\x64\145\x64\145\73\160\x61\x64\x64\x69\156\147\72\x20\61\x35\x70\x78\73\x6d\x61\x72\x67\x69\156\x2d\142\x6f\x74\x74\x6f\155\x3a\x20\62\x30\x70\x78\x3b\164\145\x78\164\x2d\141\154\151\x67\156\72\143\x65\156\x74\x65\x72\x3b\x62\157\162\x64\145\x72\72\61\x70\170\x20\x73\x6f\x6c\151\144\40\43\x45\x36\102\x33\x42\62\x3b\x66\x6f\x6e\164\55\163\x69\x7a\x65\x3a\61\x38\160\x74\x3b\x22\76\x20\x45\x52\122\117\x52\x3c\x2f\x64\x69\x76\x3e\15\12\40\x20\x20\x20\x20\40\40\40\x20\x20\x20\40\x20\x20\x20\x20\40\x20\40\x20\74\x64\151\166\x20\163\x74\x79\154\x65\75\x22\x63\x6f\x6c\157\x72\x3a\40\x23\x61\x39\x34\64\x34\62\x3b\146\x6f\x6e\164\55\163\x69\172\145\x3a\61\64\160\164\x3b\x20\x6d\141\x72\x67\151\x6e\x2d\x62\157\164\164\x6f\155\72\x32\x30\x70\x78\73\42\x3e\74\160\x3e\74\x73\x74\x72\x6f\x6e\x67\76\x45\x72\162\157\x72\x3a\x20\x3c\57\x73\x74\162\157\156\x67\76\111\x6e\166\141\154\151\144\40\101\x75\x64\x69\x65\156\143\x65\40\125\x52\111\56\x3c\57\x70\76\xd\12\x20\x20\40\x20\40\40\40\40\40\40\40\40\40\x20\40\40\x20\40\x20\x20\74\160\x3e\120\154\145\x61\163\145\x20\143\x6f\x6e\x74\141\143\164\x20\171\157\165\162\40\141\x64\x6d\151\156\x69\163\164\x72\141\x74\157\x72\x20\141\156\144\x20\162\x65\160\x6f\x72\164\x20\164\x68\x65\x20\146\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\40\145\162\x72\x6f\x72\72\x3c\57\x70\x3e\15\xa\x20\x20\x20\40\40\40\x20\40\40\x20\x20\40\x20\40\40\40\40\x20\x20\40\74\160\76\x3c\x73\x74\162\x6f\x6e\147\x3e\120\x6f\x73\x73\151\x62\x6c\145\x20\x43\141\x75\x73\x65\x3a\x20\x3c\x2f\x73\x74\162\157\156\147\x3e\111\156\x63\x6f\x72\162\x65\143\164\x20\143\x65\162\164\x69\x66\151\143\x61\164\x65\x20\141\144\144\x65\144\x20\157\156\x20\164\150\145\40\111\x64\145\156\164\x69\164\171\40\120\x72\157\166\x69\x64\x65\x72\x20\146\x6f\x72\x20\x45\156\x63\162\x79\160\x74\x69\157\x6e\74\57\x70\76\15\12\x9\x9\11\x9\x9\x3c\x70\x3e\74\163\164\162\x6f\x6e\147\76\x53\x6f\154\165\x74\x69\157\156\x3a\x3c\57\x73\164\162\157\156\147\x3e\x20\x50\x6c\145\141\163\145\x20\143\150\145\x63\x6b\x20\151\x66\40\x74\x68\145\x20\143\x65\x72\x74\x69\x66\x69\143\x61\164\x65\40\x61\144\144\145\x64\40\x69\x6e\40\x49\144\145\x6e\x74\x69\x74\171\40\120\162\157\166\151\x64\x65\162\40\x69\x73\40\x73\x61\x6d\x65\40\141\163\40\x74\150\x65\40\143\x65\x72\164\x69\146\151\143\141\164\145\40\x70\162\157\166\151\x64\x65\144\40\151\156\x20\x74\150\x65\40\120\154\x75\x67\x69\156\74\x2f\160\x3e\15\12\x9\11\11\11\x9\74\x2f\144\151\166\x3e\xd\12\40\x20\40\x20\40\40\x20\x20\40\40\40\40\40\40\40\40\40\x20\40\40\x3c\144\151\x76\x20\x73\x74\x79\154\x65\75\x22\155\x61\x72\x67\x69\x6e\x3a\63\45\x3b\x64\151\163\160\154\x61\x79\72\x62\x6c\x6f\143\153\x3b\x74\145\x78\x74\x2d\141\154\151\x67\x6e\x3a\x63\145\156\x74\145\162\73\42\x3e\15\12\x20\40\40\40\40\40\40\40\x20\40\x20\x20\x20\40\40\x20\40\x20\x20\x20\74\144\151\166\x20\x73\164\x79\x6c\145\75\42\x6d\141\x72\147\x69\156\x3a\63\45\73\144\151\x73\160\x6c\141\171\72\142\154\157\x63\x6b\x3b\164\x65\x78\164\x2d\141\x6c\151\x67\156\x3a\x63\145\156\x74\145\162\x3b\42\x3e\x3c\x69\156\x70\x75\164\x20\x73\x74\x79\154\145\75\42\x70\x61\144\144\151\x6e\147\72\61\45\73\167\x69\x64\164\x68\x3a\x31\60\60\x70\x78\73\x62\141\x63\x6b\x67\162\157\165\156\144\72\x20\43\60\x30\x39\x31\103\104\x20\156\157\156\145\x20\162\x65\x70\145\x61\164\x20\x73\143\162\157\x6c\154\x20\x30\45\40\x30\x25\73\x63\165\x72\x73\x6f\162\72\x20\160\157\151\156\164\145\x72\73\146\157\156\x74\x2d\163\x69\172\x65\72\x31\65\160\170\73\142\157\162\x64\x65\x72\55\x77\151\144\x74\x68\x3a\x20\61\x70\170\73\x62\157\162\144\x65\x72\x2d\163\x74\171\x6c\x65\x3a\x20\x73\157\x6c\x69\x64\x3b\142\157\162\x64\x65\162\55\x72\x61\144\151\x75\x73\x3a\x20\x33\x70\170\73\167\150\x69\x74\145\55\x73\x70\141\143\145\72\x20\156\157\167\162\141\x70\x3b\142\x6f\170\55\x73\151\172\151\x6e\x67\72\40\x62\157\162\144\x65\x72\55\142\157\x78\73\142\157\162\x64\x65\x72\x2d\x63\x6f\154\157\162\x3a\x20\43\x30\x30\x37\63\x41\x41\73\142\x6f\x78\55\x73\x68\141\x64\x6f\167\x3a\x20\60\160\x78\40\x31\160\170\x20\x30\x70\170\x20\162\x67\142\x61\50\x31\x32\60\x2c\40\x32\x30\60\x2c\40\62\63\60\x2c\x20\x30\56\66\51\40\x69\x6e\x73\x65\164\73\x63\x6f\x6c\157\x72\x3a\40\x23\x46\106\106\x3b\x22\164\x79\x70\x65\75\x22\142\x75\164\x74\x6f\156\x22\x20\x76\141\x6c\165\145\x3d\42\x44\157\156\x65\42\40\157\x6e\x43\x6c\x69\143\153\75\x22\x73\145\x6c\x66\x2e\143\154\157\x73\x65\50\x29\x3b\x22\x3e\74\x2f\144\x69\166\x3e";
            die;
            die;
        }
    }
    public static function getEncryptionAlgorithm($Vp)
    {
        switch ($Vp) {
            case "\x68\x74\164\160\72\57\x2f\167\167\167\56\167\63\x2e\157\162\x67\x2f\x32\x30\x30\x31\x2f\x30\64\x2f\x78\x6d\x6c\145\x6e\x63\43\164\162\151\160\154\145\144\x65\x73\x2d\x63\142\x63":
                return XMLSecurityKey::TRIPLEDES_CBC;
                goto lz;
            case "\x68\x74\164\160\x3a\57\57\167\167\167\x2e\x77\63\56\157\162\147\57\x32\60\60\x31\x2f\60\x34\x2f\170\155\154\x65\x6e\x63\x23\141\145\163\x31\x32\70\x2d\143\142\143":
                return XMLSecurityKey::AES128_CBC;
            case "\x68\164\164\160\x3a\57\x2f\167\167\x77\56\167\63\x2e\157\x72\147\57\x32\60\60\x31\x2f\60\x34\x2f\170\x6d\x6c\x65\156\143\x23\x61\x65\x73\x31\71\62\55\143\142\x63":
                return XMLSecurityKey::AES192_CBC;
                goto lz;
            case "\150\x74\164\x70\x3a\x2f\57\x77\x77\x77\56\167\63\56\157\x72\x67\x2f\x32\x30\60\61\x2f\x30\x34\57\x78\x6d\x6c\145\x6e\143\x23\141\x65\163\62\65\66\x2d\x63\x62\x63":
                return XMLSecurityKey::AES256_CBC;
                goto lz;
            case "\150\x74\164\160\x3a\x2f\x2f\167\x77\x77\56\167\x33\56\157\x72\x67\57\x32\x30\60\61\57\x30\x34\x2f\x78\155\154\x65\x6e\143\43\x72\x73\x61\x2d\61\137\65":
                return XMLSecurityKey::RSA_1_5;
                goto lz;
            case "\x68\164\164\x70\x3a\x2f\57\x77\x77\167\56\167\x33\56\157\162\147\x2f\62\60\x30\61\57\60\64\x2f\170\x6d\154\145\x6e\x63\43\x72\x73\141\55\157\141\x65\x70\x2d\x6d\x67\x66\x31\x70":
                return XMLSecurityKey::RSA_OAEP_MGF1P;
                goto lz;
            case "\x68\164\x74\x70\x3a\57\x2f\167\x77\x77\56\167\63\x2e\x6f\162\147\x2f\x32\60\60\x30\57\60\x39\x2f\170\155\x6c\144\163\151\147\x23\x64\x73\x61\55\163\x68\x61\x31":
                return XMLSecurityKey::DSA_SHA1;
                goto lz;
            case "\150\164\x74\160\x3a\57\x2f\x77\x77\x77\x2e\167\x33\x2e\x6f\162\147\x2f\x32\60\60\x30\57\60\71\x2f\170\x6d\x6c\x64\x73\x69\147\43\162\x73\141\55\163\x68\x61\x31":
                return XMLSecurityKey::RSA_SHA1;
                goto lz;
            case "\150\164\164\160\72\x2f\x2f\x77\167\167\56\x77\x33\x2e\157\162\x67\x2f\x32\x30\60\61\x2f\60\64\x2f\x78\155\154\x64\163\151\147\x2d\155\157\x72\x65\x23\x72\163\x61\x2d\x73\150\x61\62\x35\66":
                return XMLSecurityKey::RSA_SHA256;
                goto lz;
            case "\x68\164\x74\x70\x3a\x2f\x2f\x77\x77\x77\56\x77\x33\56\157\x72\x67\57\x32\60\x30\61\57\x30\64\x2f\x78\155\x6c\x64\163\x69\147\55\x6d\x6f\162\145\x23\x72\163\141\x2d\x73\150\x61\x33\70\x34":
                return XMLSecurityKey::RSA_SHA384;
                goto lz;
            case "\x68\x74\x74\160\72\x2f\57\x77\x77\167\56\167\x33\x2e\157\x72\147\57\62\60\x30\61\x2f\60\x34\x2f\170\155\x6c\x64\163\151\x67\55\x6d\x6f\x72\145\43\162\x73\x61\x2d\163\x68\141\x35\x31\62":
                return XMLSecurityKey::RSA_SHA512;
                goto lz;
            default:
                echo sprintf("\111\x6e\x76\x61\x6c\151\144\x20\x45\x6e\143\162\171\160\x74\151\x6f\x6e\40\x4d\x65\x74\150\x6f\x64\x3a\40" . $Vp);
                die;
                goto lz;
        }
        XH:
        lz:
    }
    public static function insertSignature(XMLSecurityKey $uZ, array $BH, DOMElement $pZ, DOMNode $JB = NULL)
    {
        $i6 = new XMLSecurityDSig();
        $i6->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);
        switch ($uZ->type) {
            case XMLSecurityKey::RSA_SHA256:
                $u8 = XMLSecurityDSig::SHA256;
                goto Nu;
            case XMLSecurityKey::RSA_SHA384:
                $u8 = XMLSecurityDSig::SHA384;
                goto Nu;
            case XMLSecurityKey::RSA_SHA512:
                $u8 = XMLSecurityDSig::SHA512;
                goto Nu;
            default:
                $u8 = XMLSecurityDSig::SHA1;
        }
        ti:
        Nu:
        $i6->addReferenceList(array($pZ), $u8, array("\150\164\164\160\x3a\x2f\x2f\167\167\167\x2e\167\x33\x2e\x6f\x72\x67\x2f\62\60\x30\60\x2f\60\x39\57\170\155\154\144\x73\151\147\x23\x65\x6e\x76\145\154\x6f\160\x65\144\55\x73\x69\x67\x6e\141\x74\165\162\x65", XMLSecurityDSig::EXC_C14N), array("\151\x64\x5f\156\141\155\145" => "\x49\x44", "\157\x76\145\162\x77\x72\151\164\145" => FALSE));
        $i6->sign($uZ);
        foreach ($BH as $Ea) {
            $i6->add509Cert($Ea, TRUE);
            uq:
        }
        EU:
        $i6->insertSignature($pZ, $JB);
    }
    public static function getRemainingDaysOfCurrentCertificate()
    {
        $Ea = get_option("\x6d\x6f\137\163\141\x6d\154\x5f\143\165\162\x72\x65\156\164\x5f\143\x65\162\x74");
        $uG = openssl_x509_parse($Ea);
        $la = $uG["\x76\141\154\x69\x64\124\157\137\x74\151\x6d\145\137\164"];
        $aQ = $la - time();
        return round($aQ / (60 * 60 * 24));
    }
    public static function getExpiryDateOfCurrentCertificate()
    {
        $Ea = get_option("\155\157\x5f\163\x61\155\154\x5f\143\x75\162\162\x65\156\164\137\143\x65\x72\164");
        $uG = openssl_x509_parse($Ea);
        return $uG["\x76\141\154\x69\x64\x54\x6f\x5f\x74\x69\x6d\145\x5f\x74"];
    }
    public static function getValidUntilDateFromCert($Ea)
    {
        $uG = openssl_x509_parse($Ea);
        $la = $uG["\166\141\154\151\x64\124\x6f\x5f\164\151\x6d\x65\x5f\x74"];
        $Ti = date("\131\x2d\155\x2d\x64", $la);
        $nA = $Ti . "\x54\62\x33\72\65\71\x3a\x35\x39\x5a";
        return $nA;
    }
    public static function signXML($Cr, $rt = '', $Pi = false)
    {
        $nT = array("\164\171\x70\145" => "\x70\162\x69\x76\x61\164\145");
        $uZ = new XMLSecurityKey(XMLSecurityKey::RSA_SHA256, $nT);
        if ($Pi) {
            goto Hw;
        }
        $V2 = get_option("\x6d\157\x5f\163\141\x6d\154\x5f\143\x75\162\x72\145\156\x74\137\143\145\162\x74\x5f\x70\x72\151\166\141\164\x65\137\x6b\145\x79");
        $wm = get_option("\x6d\x6f\137\x73\141\x6d\154\137\143\x75\162\x72\145\x6e\x74\x5f\143\x65\x72\x74");
        goto Vc;
        Hw:
        $V2 = file_get_contents(plugin_dir_path(__FILE__) . "\x72\x65\163\157\x75\x72\143\x65\x73" . DIRECTORY_SEPARATOR . "\155\151\x6e\x69\157\162\x61\156\x67\145\137\163\x70\137\62\x30\62\60\x5f\160\x72\151\166\x2e\153\145\171");
        $wm = file_get_contents(plugin_dir_path(__FILE__) . "\162\145\163\x6f\x75\x72\143\x65\x73" . DIRECTORY_SEPARATOR . "\155\x69\x6e\151\157\162\x61\x6e\x67\x65\137\x73\x70\137\62\60\62\x30\56\143\x72\164");
        Vc:
        $uZ->loadKey($V2, FALSE);
        $PG = new DOMDocument();
        $PG->loadXML($Cr);
        $j2 = $PG->firstChild;
        if (!empty($rt)) {
            goto bn;
        }
        self::insertSignature($uZ, array($wm), $j2);
        goto qN;
        bn:
        $EP = $PG->getElementsByTagName($rt)->item(0);
        self::insertSignature($uZ, array($wm), $j2, $EP);
        qN:
        $Fo = $j2->ownerDocument->saveXML($j2);
        $wu = base64_encode($Fo);
        return $wu;
    }
    public static function postSAMLRequest($Q2, $wq, $KH)
    {
        echo "\74\150\164\155\154\x3e\74\150\x65\x61\144\x3e\x3c\163\x63\x72\151\160\164\40\163\162\143\75\x27\x68\x74\164\160\x73\72\x2f\57\x63\x6f\144\145\56\152\x71\x75\145\162\x79\56\x63\157\155\x2f\152\161\x75\x65\162\x79\55\x31\x2e\x31\61\56\x33\56\155\x69\156\x2e\x6a\163\47\x3e\74\57\x73\x63\162\151\160\164\x3e\x3c\x73\x63\x72\x69\x70\x74\x20\164\x79\x70\145\75\x22\164\x65\x78\x74\57\x6a\141\166\141\163\143\162\151\160\164\x22\76\x24\50\146\165\156\143\164\x69\x6f\156\50\51\x7b\x64\x6f\143\165\155\145\156\164\x2e\x66\x6f\162\x6d\163\x5b\47\163\x61\x6d\x6c\55\x72\145\161\165\x65\163\x74\x2d\146\157\x72\x6d\x27\135\56\x73\x75\x62\155\151\x74\x28\51\73\175\51\x3b\74\57\163\x63\162\151\160\164\x3e\x3c\x2f\x68\145\141\144\x3e\x3c\x62\157\144\x79\76\120\x6c\145\x61\163\x65\x20\x77\141\x69\x74\56\x2e\x2e\x3c\x66\x6f\162\x6d\40\x61\x63\164\x69\157\156\75\42" . $Q2 . "\x22\40\155\x65\x74\150\x6f\144\x3d\x22\160\x6f\163\164\x22\40\151\x64\x3d\42\x73\x61\x6d\154\55\x72\x65\161\x75\x65\163\x74\x2d\146\157\x72\155\x22\x3e\x3c\x69\156\160\165\164\x20\x74\x79\160\x65\x3d\x22\150\151\144\x64\x65\x6e\x22\x20\x6e\x61\155\145\75\x22\123\101\x4d\114\122\145\x71\165\145\x73\164\42\x20\166\141\154\165\x65\75\42" . $wq . "\x22\40\57\x3e\x3c\x69\x6e\x70\x75\164\40\x74\171\160\x65\x3d\42\x68\x69\x64\x64\x65\x6e\x22\40\x6e\x61\155\145\x3d\x22\x52\x65\154\x61\x79\123\164\141\x74\145\42\x20\x76\141\154\165\x65\x3d\42" . htmlentities($KH) . "\42\40\57\x3e\74\57\146\157\162\155\76\74\x2f\x62\157\144\171\76\x3c\x2f\x68\x74\x6d\x6c\x3e";
        die;
    }
    public static function postSAMLResponse($Q2, $DK, $KH)
    {
        echo "\74\150\x74\155\x6c\76\74\x68\145\x61\144\x3e\74\163\x63\162\x69\160\164\x20\x73\162\x63\75\x27\x68\x74\x74\x70\163\72\57\x2f\143\x6f\144\145\x2e\152\x71\x75\145\162\171\x2e\143\x6f\x6d\57\152\x71\x75\x65\162\171\55\x31\56\x31\61\56\x33\x2e\x6d\x69\156\x2e\152\163\47\76\x3c\57\x73\x63\x72\151\160\164\x3e\x3c\163\143\162\151\x70\x74\x20\x74\x79\160\145\75\42\164\x65\170\x74\x2f\x6a\x61\166\x61\x73\x63\162\x69\160\x74\x22\x3e\x24\x28\146\x75\x6e\143\164\151\157\156\x28\x29\173\x64\x6f\143\x75\x6d\145\x6e\164\56\146\157\162\155\x73\133\x27\x73\141\x6d\x6c\55\162\x65\161\165\x65\163\x74\55\146\157\x72\x6d\x27\x5d\x2e\x73\x75\142\155\x69\x74\50\51\73\x7d\51\x3b\x3c\57\163\143\162\151\x70\x74\x3e\x3c\57\150\145\x61\x64\x3e\74\142\x6f\144\x79\x3e\x50\154\x65\x61\x73\145\x20\167\141\x69\164\56\56\56\x3c\146\157\x72\x6d\40\x61\143\164\151\157\156\75\x22" . $Q2 . "\x22\40\x6d\x65\164\150\x6f\x64\75\42\x70\x6f\x73\x74\42\x20\x69\x64\x3d\42\163\141\155\x6c\x2d\x72\x65\161\x75\145\163\164\55\146\x6f\162\x6d\42\76\74\151\x6e\x70\x75\x74\40\x74\171\160\x65\75\42\x68\x69\x64\144\x65\x6e\42\x20\156\141\155\x65\75\42\x53\101\x4d\114\x52\x65\163\160\157\x6e\x73\145\42\40\x76\141\154\165\145\75\x22" . $DK . "\42\40\57\76\x3c\x69\156\160\x75\x74\40\164\171\160\145\x3d\42\150\x69\144\144\145\156\x22\40\156\x61\155\x65\75\42\122\145\154\141\x79\123\x74\x61\x74\145\42\40\166\141\154\x75\145\x3d\x22" . htmlentities($KH) . "\x22\40\57\76\74\x2f\146\157\x72\155\x3e\x3c\57\x62\x6f\x64\x79\76\x3c\57\150\x74\155\x6c\x3e";
        die;
    }
    public static function sanitize_certificate($Ea)
    {
        $Ea = trim($Ea);
        $Ea = preg_replace("\57\133\xd\12\x5d\53\57", '', $Ea);
        $Ea = str_replace("\55", '', $Ea);
        $Ea = str_replace("\x42\x45\x47\111\x4e\x20\103\x45\x52\x54\111\x46\111\103\x41\124\105", '', $Ea);
        $Ea = str_replace("\x45\x4e\x44\40\x43\x45\122\124\111\106\x49\103\101\124\105", '', $Ea);
        $Ea = str_replace("\x20", '', $Ea);
        $Ea = chunk_split($Ea, 64, "\15\xa");
        $Ea = "\x2d\x2d\55\55\x2d\x42\x45\107\x49\x4e\40\x43\105\x52\124\x49\106\x49\103\x41\x54\x45\55\x2d\x2d\55\55\15\12" . $Ea . "\x2d\x2d\x2d\x2d\x2d\x45\x4e\x44\x20\x43\x45\x52\124\x49\106\111\x43\101\124\x45\55\x2d\x2d\x2d\x2d";
        return $Ea;
    }
    public static function desanitize_certificate($Ea)
    {
        $Ea = preg_replace("\57\133\xd\12\135\53\x2f", '', $Ea);
        $Ea = str_replace("\55\x2d\x2d\x2d\55\102\x45\x47\x49\x4e\40\x43\105\122\124\x49\x46\x49\103\101\x54\105\x2d\55\55\55\55", '', $Ea);
        $Ea = str_replace("\x2d\x2d\55\x2d\x2d\105\116\x44\x20\x43\105\122\x54\111\106\111\x43\x41\124\105\x2d\x2d\55\55\x2d", '', $Ea);
        $Ea = str_replace("\40", '', $Ea);
        return $Ea;
    }
    public static function mo_saml_wp_remote_call($Q2, $Gf = array(), $Hl = false)
    {
        if (!$Hl) {
            goto Gh;
        }
        $HG = wp_remote_get($Q2, $Gf);
        goto em;
        Gh:
        $HG = wp_remote_post($Q2, $Gf);
        em:
        if (!is_wp_error($HG)) {
            goto qx;
        }
        $M9 = new saml_mo_login();
        update_option("\x6d\157\137\x73\x61\x6d\x6c\137\155\x65\x73\x73\x61\147\145", "\x55\156\x61\142\154\145\40\164\157\40\143\x6f\156\x6e\x65\143\x74\x20\x74\157\40\x74\x68\145\40\111\x6e\164\145\162\156\145\164\56\40\x50\154\145\x61\x73\145\40\164\x72\171\x20\141\147\x61\151\x6e\56");
        $M9->mo_saml_show_error_message();
        return false;
        goto Rf;
        qx:
        return $HG["\x62\157\144\171"];
        Rf:
    }
}
?>
